parameters:
  - name: AzDOEnvironmentName
    type: string
  - name: TFStateResourceGroupName
    type: string
  - name: TFStateStorageAccountName
    type: string
  - name: TFStateContainerName
    type: string
  - name: TFStateBlobName
    type: string
  - name: TerraformWorkspace
    type: string
  - name: TerraformArtifactConfigRelativePath
    type: string
  - name: TerraformArtifact
    type: string
  - name: JobsVariableMappings
    type: object
    default: { }
  - name: TerraformVariableMappings
    type: object
    default: { }
  - name: TerraformOutputVariables
    type: object
    default: { }
  - name: TerraformContainer
    type: string
    default: ''

jobs:
  - deployment: planInfrastructure
    displayName: "Plan Infrastructure"
    container: ${{parameters.TerraformContainer}}
    workspace:
      clean: all
    # In order for normal variables to co-exist with either/both group & template, they must be broken down into a - name: & value: pattern
    # If done in the KEY/VALUE pairing then the group & template would be considered to be a name of a variable oppose to a variables template file or a variable group in AzDO
    # https://learn.microsoft.com/en-us/azure/devops/pipelines/yaml-schema/variables?view=azure-pipelines#examples-1
    variables:
      - ${{ each JobsVariableMapping in parameters.JobsVariableMappings }}:
          - ${{ if or(eq(JobsVariableMapping.Key, 'group'), eq(JobsVariableMapping.Key, 'template')) }}:
              - ${{ JobsVariableMapping.Key }}: ${{ JobsVariableMapping.Value }}
          - ${{ else }}:
              - name: ${{ JobsVariableMapping.Key }}
                value: ${{ JobsVariableMapping.Value }}
    environment: "${{parameters.AzDOEnvironmentName}}"
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: GatedInfrastructureDeploy
              persistCredentials: true
              path: devops-gated-infrastructure-deploy

            - download: current
              artifact: "${{parameters.TerraformArtifact}}"
              retryCountOnTaskFailure: '2'
              displayName: 'Download terraform artifact'

            - task: PowerShell@2
              name: plan
              displayName: "Terraform Plan"
              inputs:
                targetType: filePath
                filePath: "$(Pipeline.Workspace)/devops-gated-infrastructure-deploy/powershell/terraform-plan.ps1"
                arguments: >
                  -TFStateResourceGroupName ${{parameters.TFStateResourceGroupName}}
                  -TFStateStorageAccountName ${{parameters.TFStateStorageAccountName}}
                  -TFStateContainerName ${{parameters.TFStateContainerName}}
                  -TFStateBlobName ${{parameters.TFStateBlobName}}
                  -TerraformFilesDirectory "$(Pipeline.Workspace)/${{parameters.TerraformArtifact}}${{parameters.TerraformArtifactConfigRelativePath}}"
                  -Workspace ${{lower(parameters.TerraformWorkspace)}}
              env:
                ${{each TerraformVariableMappings in parameters.TerraformVariableMappings}}:
                  ${{TerraformVariableMappings.Key}}: ${{TerraformVariableMappings.Value}}

  - job: manualVerification
    dependsOn: planInfrastructure
    pool: server
    condition: eq(dependencies.planInfrastructure.outputs['planInfrastructure.plan.needsVerification'], 'true')
    displayName: "Service Manual Verification"
    steps:
      - task: Delay@1
        displayName: "👇🔁 Refresh browser if button to verify does not appear in the task below"

      - task: ManualValidation@0
        displayName: "Accept or Reject Plan?"
        timeoutInMinutes: 60

  - deployment: deployInfrastructure
    displayName: "Deploy Infrastructure"
    container: ${{parameters.TerraformContainer}}
    dependsOn:
      - manualVerification
      - planInfrastructure
    condition: or(succeeded('manualVerification'), and(succeeded('planInfrastructure'), ne(dependencies.planInfrastructure.outputs['planInfrastructure.plan.needsVerification'], 'true')))
    environment: "${{parameters.AzDOEnvironmentName}}"
    workspace:
      clean: all
    # In order for normal variables to co-exist with either/both group & template, they must be broken down into a - name: & value: pattern
    # If done in the KEY/VALUE pairing then the group & template would be considered to be a name of a variable oppose to a variables template file or a variable group in AzDO
    # https://learn.microsoft.com/en-us/azure/devops/pipelines/yaml-schema/variables?view=azure-pipelines#examples-1
    variables:
      - ${{ each JobsVariableMapping in parameters.JobsVariableMappings }}:
          - ${{ if or(eq(JobsVariableMapping.Key, 'group'), eq(JobsVariableMapping.Key, 'template')) }}:
              - ${{ JobsVariableMapping.Key }}: ${{ JobsVariableMapping.Value }}
          - ${{ else }}:
              - name: ${{ JobsVariableMapping.Key }}
                value: ${{ JobsVariableMapping.Value }}
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: GatedInfrastructureDeploy
              persistCredentials: true
              path: devops-gated-infrastructure-deploy

            - download: current
              artifact: "${{parameters.TerraformArtifact}}"
              retryCountOnTaskFailure: '2'
              displayName: 'Download terraform artifact'

            - task: PowerShell@2
              displayName: "Terraform Apply"
              name: deployment
              inputs:
                targetType: filePath
                filePath: "$(Pipeline.Workspace)/devops-gated-infrastructure-deploy/powershell/terraform-apply.ps1"
                arguments: >
                  -TFStateResourceGroupName ${{parameters.TFStateResourceGroupName}}
                  -TFStateStorageAccountName ${{parameters.TFStateStorageAccountName}}
                  -TFStateContainerName ${{parameters.TFStateContainerName}}
                  -TFStateBlobName ${{parameters.TFStateBlobName}}
                  -TerraformFilesDirectory "$(Pipeline.Workspace)/${{parameters.TerraformArtifact}}${{parameters.TerraformArtifactConfigRelativePath}}"
                  -Workspace ${{lower(parameters.TerraformWorkspace)}}
                  -TerraformOutputVariables ${{convertToJson(parameters.TerraformOutputVariables)}}
              env:
                ${{each TerraformVariableMappings in parameters.TerraformVariableMappings}}:
                  ${{TerraformVariableMappings.Key}}: ${{TerraformVariableMappings.Value}}